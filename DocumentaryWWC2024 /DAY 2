//PROBLEM 1
Q1: Convert Sorted Array to Binary Search Tree
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
//CODE
#include <iostream>
#include <vector>

using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};


TreeNode* sortedArrayToBST(vector<int>& nums, int left, int right) {
    if (left > right) {
        return NULL; 
    }

    int mid = left + (right - left) / 2;

   
    TreeNode* root = new TreeNode(nums[mid]);

    root->left = sortedArrayToBST(nums, left, mid - 1);
    root->right = sortedArrayToBST(nums, mid + 1, right);

    return root;
}

TreeNode* sortedArrayToBST(vector<int>& nums) {
    return sortedArrayToBST(nums, 0, nums.size() - 1);
}

void inOrderTraversal(TreeNode* root) {
    if (root) {
        inOrderTraversal(root->left);
        cout << root->val << " ";
        inOrderTraversal(root->right);
    }
}

int main() {
    vector<int> nums = {-10, -3, 0, 5, 9}; 
    TreeNode* root = sortedArrayToBST(nums);

    cout << "In-order traversal of the constructed BST: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}

//PROBLEM 2
Q2: Valid Sudoku
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition.Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
//CODE
#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

bool isValidSudoku(vector<vector<char>>& board) {
    // Use sets to track seen numbers for rows, columns, and boxes
    unordered_set<char> rows[9];
    unordered_set<char> cols[9];
    unordered_set<char> boxes[9];

    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            char num = board[i][j];
            if (num != '.') { // Only check filled cells
                // Calculate the index for the 3x3 box
                int boxIndex = (i / 3) * 3 + (j / 3);

                // Check if the number is already in the current row, column, or box
                if (rows[i].count(num) || cols[j].count(num) || boxes[boxIndex].count(num)) {
                    return false; // Invalid if found in any of the sets
                }

                // Add the number to the corresponding sets
                rows[i].insert(num);
                cols[j].insert(num);
                boxes[boxIndex].insert(num);
            }
        }
    }
    return true; // If no conflicts were found, the board is valid
}

int main() {
    // Example Sudoku board (valid)
    vector<vector<char>> board = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    if (isValidSudoku(board)) {
        cout << "The Sudoku board is valid." << endl;
    } else {
        cout << "The Sudoku board is invalid." << endl;
    }

    return 0;
}

//PROBLEM 3
Q3: Remove Element
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.
The relative order of the elements should be kept the same. Then return the number of unique elements in nums..
//CODE
#include <iostream>
#include <vector>

using namespace std;

int removeDuplicates(vector<int>& nums) {
    if (nums.empty()) {
        return 0; // If the array is empty, return 0
    }

    int uniqueIndex = 1; // Start from the second element

    for (int i = 1; i < nums.size(); i++) {
        // If the current element is different from the previous one
        if (nums[i] != nums[i - 1]) {
            nums[uniqueIndex] = nums[i]; // Update the unique index
            uniqueIndex++; // Move to the next position for unique elements
        }
    }

    return uniqueIndex; // The number of unique elements
}

int main() {
    vector<int> nums = {1, 1, 2, 2, 3, 4, 4, 5}; // Example input

    int uniqueCount = removeDuplicates(nums);

    cout << "Number of unique elements: " << uniqueCount << endl;
    cout << "Array after removing duplicates: ";
    for (int i = 0; i < uniqueCount; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;

    return 0;
}

//Problem 4
Q4: Design a system in C++ that uses a linked list to simulate a real-time task scheduler for a multi-threaded operating system. Each node in the linked list represents a task, containing attributes like a unique task ID, task priority, estimated execution time, and a pointer to the next task. The linked list must dynamically adapt to new tasks being added, tasks completing, or tasks being pre-empted based on their priority. Implement functionality to insert tasks into the list in priority order (higher priority tasks come first), remove tasks upon completion, and dynamically reallocate execution slots if a higher priority task is added mid-execution. Additionally, the system should support a circular linked list to handle periodic tasks that need to re-enter the scheduling queue after a defined time interval. The implementation must ensure efficient memory usage and handle edge cases, such as managing tasks with the same priority, handling an empty task queue, and dealing with corrupted nodes. The program should output the current state of the task list, showing the order of execution and periodically updating it as tasks are added, completed, or preempted in real-time. This problem challenges your understanding of advanced linked list manipulation, dynamic memory management, and multi-threaded system simulation.
//Code

#include <iostream>
#include <string>
#include <thread>
#include <chrono>

using namespace std;

struct TaskNode {
    int taskId;
    int priority;
    int executionTime; // in seconds
    TaskNode* next;

    TaskNode(int id, int prio, int time)
        : taskId(id), priority(prio), executionTime(time), next(nullptr) {}
};

class TaskScheduler {
private:
    TaskNode* head; // Head of the task list

public:
    TaskScheduler() : head(nullptr) {}

    // Insert task by priority
    void insertTask(int id, int priority, int executionTime) {
        TaskNode* newTask = new TaskNode(id, priority, executionTime);

        // Empty list case
        if (!head || head->priority < priority) {
            newTask->next = head;
            head = newTask;
            return;
        }

        // Traverse to find the correct position
        TaskNode* current = head;
        while (current->next && current->next->priority >= priority) {
            current = current->next;
        }

        // Insert the new task
        newTask->next = current->next;
        current->next = newTask;
    }

    // Complete the task at the head
    void completeTask() {
        if (!head) {
            cout << "No tasks to complete.\n";
            return;
        }

        TaskNode* temp = head;
        head = head->next;

        cout << "Task " << temp->taskId << " completed.\n";
        delete temp;
    }

    // Print current task list
    void displayTasks() {
        if (!head) {
            cout << "No tasks in the scheduler.\n";
            return;
        }

        TaskNode* current = head;
        cout << "Current Task List:\n";
        while (current) {
            cout << "Task ID: " << current->taskId
                 << ", Priority: " << current->priority
                 << ", Execution Time: " << current->executionTime << "s\n";
            current = current->next;
        }
    }

    ~TaskScheduler() {
        while (head) {
            completeTask();
        }
    }
};

int main() {
    TaskScheduler scheduler;

    scheduler.insertTask(1, 2, 5);
    scheduler.insertTask(2, 1, 3);
    scheduler.insertTask(3, 3, 2);

    scheduler.displayTasks();

    scheduler.completeTask();
    scheduler.displayTasks();

    scheduler.insertTask(4, 5, 4); // High-priority task
    scheduler.displayTasks();

    return 0;
}

//Problem 5
Q5: Design a train reservation system in C++ using linked lists to manage bookings for multiple trains, each with several compartments. Each compartment has a fixed number of seats, and passengers can book, cancel, or check the availability of seats for specific compartments. Additionally, the system should dynamically allocate memory for new bookings and keep track of canceled seats efficiently
//Code

#include <iostream>
#include <string>
using namespace std;

struct CompartmentNode {
    int compartmentId;
    int seats;
    CompartmentNode* next;

    CompartmentNode(int id, int totalSeats)
        : compartmentId(id), seats(totalSeats), next(nullptr) {}
};

struct TrainNode {
    int trainId;
    CompartmentNode* compartments;
    TrainNode* next;

    TrainNode(int id) : trainId(id), compartments(nullptr), next(nullptr) {}
};

class TrainReservationSystem {
private:
    TrainNode* head; // Head of the train list

public:
    TrainReservationSystem() : head(nullptr) {}

    // Add a train
    void addTrain(int trainId) {
        TrainNode* newTrain = new TrainNode(trainId);
        newTrain->next = head;
        head = newTrain;
    }

    // Add a compartment to a train
    void addCompartment(int trainId, int compartmentId, int seats) {
        TrainNode* train = findTrain(trainId);
        if (!train) {
            cout << "Train not found.\n";
            return;
        }

        CompartmentNode* newCompartment = new CompartmentNode(compartmentId, seats);
        newCompartment->next = train->compartments;
        train->compartments = newCompartment;
    }

    // Book a seat
    void bookSeat(int trainId, int compartmentId) {
        CompartmentNode* compartment = findCompartment(trainId, compartmentId);
        if (!compartment) {
            cout << "Compartment not found.\n";
            return;
        }

        if (compartment->seats > 0) {
            compartment->seats--;
            cout << "Seat booked successfully.\n";
        } else {
            cout << "No seats available.\n";
        }
    }

    // Cancel a booking
    void cancelBooking(int trainId, int compartmentId) {
        CompartmentNode* compartment = findCompartment(trainId, compartmentId);
        if (!compartment) {
            cout << "Compartment not found.\n";
            return;
        }

        compartment->seats++;
        cout << "Booking canceled successfully.\n";
    }

    // Check seat availability
    void checkAvailability(int trainId, int compartmentId) {
        CompartmentNode* compartment = findCompartment(trainId, compartmentId);
        if (!compartment) {
            cout << "Compartment not found.\n";
            return;
        }

        cout << "Available seats: " << compartment->seats << endl;
    }

private:
    TrainNode* findTrain(int trainId) {
        TrainNode* current = head;
        while (current && current->trainId != trainId) {
            current = current->next;
        }
        return current;
    }

    CompartmentNode* findCompartment(int trainId, int compartmentId) {
        TrainNode* train = findTrain(trainId);
        if (!train) return nullptr;

        CompartmentNode* compartment = train->compartments;
        while (compartment && compartment->compartmentId != compartmentId) {
            compartment = compartment->next;
        }
        return compartment;
    }
};

int main() {
    TrainReservationSystem system;

    system.addTrain(101);
    system.addCompartment(101, 1, 50);
    system.addCompartment(101, 2, 30);

    system.checkAvailability(101, 1);
    system.bookSeat(101, 1);
    system.checkAvailability(101, 1);

    system.cancelBooking(101, 1);
    system.checkAvailability(101, 1);

    return 0;
}
